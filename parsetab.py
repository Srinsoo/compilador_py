
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftEQUALSNOTEQ<>LESSEQGREATEREQleft+-left*/rightASSIGNAND ASSIGN CAPTURE DO DPOINTS ELSE ENDIF ENDWHILE EQUALS GREATEREQ ID IF LESSEQ NOT NOTEQ NUMBER OR STRING THEN WHILE WRITEprogram : statement_liststatement_list : statement\n                      | statement statement_liststatement : assignment DPOINTS\n                 | write DPOINTS\n                 | capture DPOINTS\n                 | expression DPOINTS\n                 | if_statement\n                 | while_statementwrite : WRITE '(' STRING ')'\n             | WRITE '(' expression ')'\n             | WRITE '(' STRING ',' expression ')' capture : CAPTURE '(' ID ')'while_statement : WHILE condition DO statement_list ENDWHILEif_statement : IF condition THEN statement_list opt_else ENDIFopt_else : ELSE statement_list\n                | emptycondition : '(' boolean_expr ')'boolean_expr : expression relational_operator expression\n                    | expression EQUALS expression\n                    | expression NOTEQ expression\n                    | expression '<' expression\n                    | expression '>' expression\n                    | expression LESSEQ expression\n                    | expression GREATEREQ expression\n                    | expression AND expression\n                    | expression OR expression\n                    | NOT expressionrelational_operator : '<'\n                           | '>'\n                           | LESSEQ\n                           | GREATEREQ\n                           | EQUALS\n                           | NOTEQassignment : ID ASSIGN expression\n                  | ID ASSIGN boolean_exprexpression : term\n                  | expression '+' term\n                  | expression '-' term\n                  | conditionterm : factor\n            | term '*' factor\n            | term '/' factorfactor : NUMBERfactor : '(' expression ')'factor : IDempty :"
    
_lr_action_items = {'ID':([0,3,8,9,12,21,22,23,24,25,26,27,28,31,33,34,35,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,84,86,],[10,10,-8,-9,32,-4,-5,-6,-7,32,32,32,32,32,58,32,32,32,32,32,-33,-34,-29,-30,-31,-32,32,32,10,10,32,10,-14,-15,]),'WRITE':([0,3,8,9,21,22,23,24,61,63,82,84,86,],[11,11,-8,-9,-4,-5,-6,-7,11,11,11,-14,-15,]),'CAPTURE':([0,3,8,9,21,22,23,24,61,63,82,84,86,],[13,13,-8,-9,-4,-5,-6,-7,13,13,13,-14,-15,]),'IF':([0,3,8,9,21,22,23,24,61,63,82,84,86,],[16,16,-8,-9,-4,-5,-6,-7,16,16,16,-14,-15,]),'WHILE':([0,3,8,9,21,22,23,24,61,63,82,84,86,],[17,17,-8,-9,-4,-5,-6,-7,17,17,17,-14,-15,]),'(':([0,3,8,9,11,12,13,16,17,21,22,23,24,25,26,27,28,31,34,35,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,84,86,],[12,12,-8,-9,28,12,33,37,37,-4,-5,-6,-7,40,40,12,12,12,40,40,12,12,12,-33,-34,-29,-30,-31,-32,12,12,12,12,12,12,-14,-15,]),'NUMBER':([0,3,8,9,12,21,22,23,24,25,26,27,28,31,34,35,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,84,86,],[19,19,-8,-9,19,-4,-5,-6,-7,19,19,19,19,19,19,19,19,19,19,-33,-34,-29,-30,-31,-32,19,19,19,19,19,19,-14,-15,]),'$end':([1,2,3,8,9,20,21,22,23,24,84,86,],[0,-1,-2,-8,-9,-3,-4,-5,-6,-7,-14,-15,]),'ELSE':([3,8,9,20,21,22,23,24,78,84,86,],[-2,-8,-9,-3,-4,-5,-6,-7,82,-14,-15,]),'ENDIF':([3,8,9,20,21,22,23,24,78,81,83,84,86,87,],[-2,-8,-9,-3,-4,-5,-6,-7,-47,86,-17,-14,-15,-16,]),'ENDWHILE':([3,8,9,20,21,22,23,24,79,84,86,],[-2,-8,-9,-3,-4,-5,-6,-7,84,-14,-15,]),'DPOINTS':([4,5,6,7,10,14,15,18,19,32,39,41,42,43,46,47,57,59,60,65,67,68,69,70,71,72,73,74,75,76,77,85,],[21,22,23,24,-46,-37,-40,-41,-44,-46,-38,-39,-35,-36,-18,-45,-28,-42,-43,-10,-11,-19,-20,-21,-22,-23,-24,-25,-26,-27,-13,-12,]),'+':([7,10,14,15,18,19,30,32,39,41,42,45,46,47,57,59,60,62,64,68,69,70,71,72,73,74,75,76,80,],[25,-46,-37,-40,-41,-44,25,-46,-38,-39,25,25,-18,-45,25,-42,-43,25,25,25,25,25,25,25,25,25,25,25,25,]),'-':([7,10,14,15,18,19,30,32,39,41,42,45,46,47,57,59,60,62,64,68,69,70,71,72,73,74,75,76,80,],[26,-46,-37,-40,-41,-44,26,-46,-38,-39,26,26,-18,-45,26,-42,-43,26,26,26,26,26,26,26,26,26,26,26,26,]),'ASSIGN':([10,],[27,]),'*':([10,14,18,19,32,39,41,47,59,60,],[-46,34,-41,-44,-46,34,34,-45,-42,-43,]),'/':([10,14,18,19,32,39,41,47,59,60,],[-46,35,-41,-44,-46,35,35,-45,-42,-43,]),'NOT':([12,27,37,],[31,31,31,]),')':([14,15,18,19,29,30,32,39,41,44,45,46,47,57,58,59,60,64,68,69,70,71,72,73,74,75,76,80,],[-37,-40,-41,-44,46,47,-46,-38,-39,65,67,-18,-45,-28,77,-42,-43,47,-19,-20,-21,-22,-23,-24,-25,-26,-27,85,]),'EQUALS':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,49,-46,-38,-39,49,-18,-45,-42,-43,49,]),'NOTEQ':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,50,-46,-38,-39,50,-18,-45,-42,-43,50,]),'<':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,51,-46,-38,-39,51,-18,-45,-42,-43,51,]),'>':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,52,-46,-38,-39,52,-18,-45,-42,-43,52,]),'LESSEQ':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,53,-46,-38,-39,53,-18,-45,-42,-43,53,]),'GREATEREQ':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,54,-46,-38,-39,54,-18,-45,-42,-43,54,]),'AND':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,55,-46,-38,-39,55,-18,-45,-42,-43,55,]),'OR':([14,15,18,19,30,32,39,41,42,46,47,59,60,62,],[-37,-40,-41,-44,56,-46,-38,-39,56,-18,-45,-42,-43,56,]),'STRING':([28,],[44,]),'THEN':([36,46,],[61,-18,]),'DO':([38,46,],[63,-18,]),',':([44,],[66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,61,63,82,],[2,20,78,79,87,]),'statement':([0,3,61,63,82,],[3,3,3,3,3,]),'assignment':([0,3,61,63,82,],[4,4,4,4,4,]),'write':([0,3,61,63,82,],[5,5,5,5,5,]),'capture':([0,3,61,63,82,],[6,6,6,6,6,]),'expression':([0,3,12,27,28,31,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,],[7,7,30,42,45,57,62,64,68,69,70,71,72,73,74,75,76,7,7,80,7,]),'if_statement':([0,3,61,63,82,],[8,8,8,8,8,]),'while_statement':([0,3,61,63,82,],[9,9,9,9,9,]),'term':([0,3,12,25,26,27,28,31,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,],[14,14,14,39,41,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'condition':([0,3,12,16,17,27,28,31,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,],[15,15,15,36,38,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'factor':([0,3,12,25,26,27,28,31,34,35,37,40,48,49,50,51,52,53,54,55,56,61,63,66,82,],[18,18,18,18,18,18,18,18,59,60,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'boolean_expr':([12,27,37,],[29,43,29,]),'relational_operator':([30,42,62,],[48,48,48,]),'opt_else':([78,],[81,]),'empty':([78,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',26),
  ('statement -> assignment DPOINTS','statement',2,'p_statement','parser.py',37),
  ('statement -> write DPOINTS','statement',2,'p_statement','parser.py',38),
  ('statement -> capture DPOINTS','statement',2,'p_statement','parser.py',39),
  ('statement -> expression DPOINTS','statement',2,'p_statement','parser.py',40),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',42),
  ('write -> WRITE ( STRING )','write',4,'p_write','parser.py',47),
  ('write -> WRITE ( expression )','write',4,'p_write','parser.py',48),
  ('write -> WRITE ( STRING , expression )','write',6,'p_write','parser.py',49),
  ('capture -> CAPTURE ( ID )','capture',4,'p_capture','parser.py',58),
  ('while_statement -> WHILE condition DO statement_list ENDWHILE','while_statement',5,'p_while_statement','parser.py',63),
  ('if_statement -> IF condition THEN statement_list opt_else ENDIF','if_statement',6,'p_if_statement','parser.py',68),
  ('opt_else -> ELSE statement_list','opt_else',2,'p_opt_else','parser.py',73),
  ('opt_else -> empty','opt_else',1,'p_opt_else','parser.py',74),
  ('condition -> ( boolean_expr )','condition',3,'p_condition','parser.py',82),
  ('boolean_expr -> expression relational_operator expression','boolean_expr',3,'p_boolean_expr','parser.py',87),
  ('boolean_expr -> expression EQUALS expression','boolean_expr',3,'p_boolean_expr','parser.py',88),
  ('boolean_expr -> expression NOTEQ expression','boolean_expr',3,'p_boolean_expr','parser.py',89),
  ('boolean_expr -> expression < expression','boolean_expr',3,'p_boolean_expr','parser.py',90),
  ('boolean_expr -> expression > expression','boolean_expr',3,'p_boolean_expr','parser.py',91),
  ('boolean_expr -> expression LESSEQ expression','boolean_expr',3,'p_boolean_expr','parser.py',92),
  ('boolean_expr -> expression GREATEREQ expression','boolean_expr',3,'p_boolean_expr','parser.py',93),
  ('boolean_expr -> expression AND expression','boolean_expr',3,'p_boolean_expr','parser.py',94),
  ('boolean_expr -> expression OR expression','boolean_expr',3,'p_boolean_expr','parser.py',95),
  ('boolean_expr -> NOT expression','boolean_expr',2,'p_boolean_expr','parser.py',96),
  ('relational_operator -> <','relational_operator',1,'p_relational_operator','parser.py',109),
  ('relational_operator -> >','relational_operator',1,'p_relational_operator','parser.py',110),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',111),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',112),
  ('relational_operator -> EQUALS','relational_operator',1,'p_relational_operator','parser.py',113),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','parser.py',114),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',119),
  ('assignment -> ID ASSIGN boolean_expr','assignment',3,'p_assignment','parser.py',120),
  ('expression -> term','expression',1,'p_expression','parser.py',131),
  ('expression -> expression + term','expression',3,'p_expression','parser.py',132),
  ('expression -> expression - term','expression',3,'p_expression','parser.py',133),
  ('expression -> condition','expression',1,'p_expression','parser.py',134),
  ('term -> factor','term',1,'p_term','parser.py',145),
  ('term -> term * factor','term',3,'p_term','parser.py',146),
  ('term -> term / factor','term',3,'p_term','parser.py',147),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',155),
  ('factor -> ( expression )','factor',3,'p_factor_expr','parser.py',160),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',165),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',170),
]
